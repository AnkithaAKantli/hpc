22) A set of four robots are configured as a circular network (ring). Each robot has a link with 
its two immediate neighbours. While performing a task assigned to them, each one of them 
is supposed to receive a message containing one data item of type integer from the robot on 
its left and is supposed to double the value and send it to the robot on its right. The activity 
is completed after one round of message passing is completed (i.e. the first robot receives a 
message from the last robot in the chain). Write the programs for each of the robots using 
OpenMPI extensions. Ensure that the programs are safe. 
 
#include <mpi.h> 
#include <stdio.h> 
 
int main(int argc, char** argv) { 
    int rank, size, left, right, data, received_data; 
 
    // Initialize MPI environment 
    MPI_Init(&argc, &argv); 
    MPI_Comm_rank(MPI_COMM_WORLD, &rank); // Get rank of the current process 
    MPI_Comm_size(MPI_COMM_WORLD, &size); // Get total number of processes 
 
    // Ensure we have exactly 4 processes 
    if (size != 4) { 
        if (rank == 0) { 
            printf("This program requires exactly 4 processes.\n"); 
        } 
        MPI_Finalize(); 
        return 1; 
    } 
 
    // Define neighbors in the circular network 
    left = (rank - 1 + size) % size;   // Process on the left 
    right = (rank + 1) % size;         // Process on the right 
 
 
// Initialize data for each robot 
data = rank + 1; // Example: robot 0 starts with 1, robot 1 starts with 2, and so on. 
// Print initial data 
printf("Robot %d starts with data: %d\n", rank, data); 
// Send data to the right neighbor and receive from the left neighbor 
MPI_Sendrecv(&data, 1, MPI_INT, right, 0,  // Send to the right 
&received_data, 1, MPI_INT, left, 0, // Receive from the left 
MPI_COMM_WORLD, MPI_STATUS_IGNORE); 
// Process the received data 
data = received_data * 2; 
// Print final data after processing 
printf("Robot %d received %d and processed it to %d\n", rank, received_data, data); 
// Finalize MPI environment 
MPI_Finalize(); 
return 0; 
} 
Output 
Robot 0 starts with data: 1 
Robot 1 starts with data: 2 
Robot 2 starts with data: 3 
Robot 3 starts with data: 4 
Robot 0 received 4 and processed it to 8 
Robot 1 received 1 and processed it to 2 
Robot 2 received 2 and processed it to 4 
Robot 3 received 3 and processed it to 6
